The files in this directory is for generation of temporary files.

GenerateClosestArea.py: the code to generate the closest area for every area. Saved in "ClosestArea.dump", the input file include: "CluSimDic" the dictionary for the cluster similarity

AuthorListGenerate.py: The code to crawl all the author names from .xml files. The name is in the format of Firstname + " " + Middlename + " " + Lastname. So there will be many names like "Carl   Lagoze" in the end.
The output file is a dictionary [au: paper number] called AuthorList_all.dump stored in ACMdata directory
Later the AuthorList_above5.dump will be generated by other codes to find the authors publish at least 5 papers in this dataset.



occurrencCount.py: The codes to count in every documents, what are the grams exist. 
The input file is ACMdata/in.txt, the output file is gramlist in the results directory. Every line of gramlist will contain a list of grams seperated by \t show the grams in the documents

co-occurrenceDetection.py: The codes are used for detect the cooccurrence of grams. The input file is gramlist. The output file is dict (a dictionary to store all the grams) and word-links (saved the co occurenece information)

SimMatriCalc.py: The codes to generate the similarity files for the pairs of words. the similarity values are stored in similarityFile. The summary information for the similarity calculation are stored in Summary. pref.txt which is used for the codes of apcluster is generated also. All the pref values are set 0 now. (could be set as the average of similarity. But not sure whether the clustering process will converge or not)

CluSimCalc.py: The codes to calculate the similiarity between Clusters (average similarity of the grams). It will use files DicForClu.dump, exemplar.dump, dict and similarityFile. The similarity results will be printed to clusterSim(txt) and CluSimDic(pickle dump) in the result directory. 

CoherenceAveDis.py: The codes to calculate the average similarity within clusters (as the Coherence). It will use DicForClu.dump, exemplar.dump, dict, similarityFile. The results will be saved in SimInsideAve.txt and SimInsideAve.dump in the result directory

CoherenceCitation.py: The code to calculate the coherence based on the citation information(how many cited papers are from the same topics as the source paper). It will use IdMatchTopics from results directory and ID_RF.dump from ACMdata directory. The output file including SimInsideCitation.txt and SimInsideCitation.dump(a dictionary) will be saved in the result directory.

CoherenceCoauthor.py: The code to calculate the coherence based on the coauthor information(how many authors in the paper regard the topics as their major topics). It will use IdMatchTopics from results directory. The output file including SimInsideCoauthor.dump and SimInsideCoauthor.txt will be saved in the result directory.
*Also the AuthorMatchTopics.dump and AuthorPaperNum.dump are generated and printed from this script

